<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebDesk.Lib</name>
    </assembly>
    <members>
        <member name="T:WebDesk.DataStoreSettings">
            <summary>
            Application settings
            </summary>
        </member>
        <member name="P:WebDesk.DataStoreSettings.General">
            <summary>
            General settings
            </summary>
        </member>
        <member name="P:WebDesk.DataStoreSettings.Http">
            <summary>
            Http related settings
            </summary>
        </member>
        <member name="T:WebDesk.GeneralSettings">
            <summary>
            General settings
            </summary>
        </member>
        <member name="P:WebDesk.GeneralSettings.CultureCode">
            <summary>
            The default culture, i.e. el-GR
            <para>NOTE: This setting is assigned initially by default to any new visitor.</para>
            </summary>
        </member>
        <member name="P:WebDesk.GeneralSettings.CurrencyCode">
            <summary>
            Default currency code, e.g. EUR, USD, etc.
            <para>NOTE: This setting is assigned initially by default to any new visitor.</para>
            </summary>
        </member>
        <member name="P:WebDesk.GeneralSettings.CurrencySymbol">
            <summary>
            Returns the currency symbol. Used in formatting prices
            </summary>
        </member>
        <member name="P:WebDesk.GeneralSettings.MoneyFormat">
            <summary>
            Format string for formatting money values
            </summary>
        </member>
        <member name="P:WebDesk.GeneralSettings.DefaultCacheTimeoutMinutes">
            <summary>
            Default Cache retention policy, in minutes
            </summary>
        </member>
        <member name="P:WebDesk.GeneralSettings.UserCookieExpirationHours">
            <summary>
            How many hours to keep visitor cookie valid.
            <para> -1 = never expires, 0 = expire immediately, nnn = expire after nnn hours</para>
            </summary>
        </member>
        <member name="T:WebDesk.HttpSettings">
            <summary>
            Http related settings
            </summary>
        </member>
        <member name="M:WebDesk.HttpSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:WebDesk.HttpSettings.StaticFilesCacheControl">
            <summary>
            Gets or sets the value of the "Cache-Control" header value for static content.
            <para>Leave it empty or null, for no setting at all.</para>
            <para>SEE: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control </para>
            <para>SEE: https://docs.microsoft.com/en-us/aspnet/core/performance/caching/response </para>
            </summary>
        </member>
        <member name="T:WebDesk.DataLogListener">
            <summary>
            LogListener, saves log information to database
            </summary>
        </member>
        <member name="M:WebDesk.DataLogListener.ProcessLog(Tripous.Logging.LogInfo)">
             <summary>
             Called by the Logger to pass LogInfo to a log listener.
            <para>
             CAUTION: The Logger calls its Listeners asynchronously, that is from inside a thread.
             Thus Listeners should synchronize the ProcessLogInfo() call. Controls need to check if InvokeRequired.
             </para>
             </summary>
        </member>
        <member name="T:WebDesk.DataStore">
            <summary>
            Represents the database
            </summary>
        </member>
        <member name="F:WebDesk.DataStore.EnLanguage">
            <summary>
            English language
            </summary>
        </member>
        <member name="F:WebDesk.DataStore.GrLanguage">
            <summary>
            Greek language
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.RegisterDbProviderFactories">
            <summary>
            Registers DbProviderFactory classes
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.ConnectDatabases">
            <summary>
            Loads database configuration settings.
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.CreateDatabases">
            <summary>
            Creates any non-existing creatable database.
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.ExecuteSchemas">
            <summary>
            Creates database tables etc. based on the registered schemas
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.Initialize(WebDesk.IWebAppContext)">
            <summary>
            Initializer
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.AddObjectMaps(System.Object)">
            <summary>
            Called by the system. 
            <para>Instructs plugin to add any object to object mappings may have by calling either:</para>
            <para><c>App.AddObjectMap(Type Source, Type Dest, bool TwoWay = false)</c></para>
            <para>or the passed in Configurator object which in the current implementantion is an AutoMapper.IMapperConfigurationExpression instance </para>
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.GetLanguages">
            <summary>
            Returns the list of languages this web-site supports
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.GetSettings">
            <summary>
            Returns the data-store settings
            <para>WARNING: do NOT use the cache with settings.</para>
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.GetRequestor(System.String)">
            <summary>
            Returns a user from database found under a specified Id, if any, else null.
            </summary>
        </member>
        <member name="P:WebDesk.DataStore.Initialized">
            <summary>
            Returns true when initialized
            </summary>
        </member>
        <member name="P:WebDesk.DataStore.App">
            <summary>
            Represents the web application
            </summary>
        </member>
        <member name="P:WebDesk.DataStore.SqlStore">
            <summary>
            Returns the default sql store
            </summary>
        </member>
        <member name="M:WebDesk.DataStore.RegisterSchemas">
            <summary>
            Creates database tables etc. based on the registered schemas
            </summary>
        </member>
        <member name="T:WebDesk.IPlugin">
            <summary>
            A dynamically loadable external module.
            <para>NOTE: An external module is an assembly with a filename as ewm_FILE_NAME.dll. It uses ewm_ as a filename prefix. </para>
            </summary>
        </member>
        <member name="M:WebDesk.IPlugin.Initialize(WebDesk.IWebAppContext)">
            <summary>
            Called by the web site to initialize the plugin.
            </summary>
        </member>
        <member name="M:WebDesk.IPlugin.AddObjectMaps(System.Object)">
            <summary>
            Called by the system. 
            <para>Instructs plugin to add any object to object mappings may have by calling either:</para>
            <para><c>App.AddObjectMap(Type Source, Type Dest, bool TwoWay = false)</c></para>
            <para>or the passed in Configurator object which in the current implementantion is an AutoMapper.IMapperConfigurationExpression instance </para>
            </summary>
        </member>
        <member name="T:WebDesk.IRequestContext">
            <summary>
            Represents a context regarding the current HTTP request.
            <para>NOTE: Whatever information is intended to have the lifetime of the HTTP request should be added in this interface.</para>
            </summary>
        </member>
        <member name="P:WebDesk.IRequestContext.HttpContext">
            <summary>
            The http context
            </summary>
        </member>
        <member name="P:WebDesk.IRequestContext.Request">
            <summary>
            The http request
            </summary>
        </member>
        <member name="P:WebDesk.IRequestContext.Query">
            <summary>
            The query string as a collection of key-value pairs
            </summary>
        </member>
        <member name="P:WebDesk.IRequestContext.Language">
            <summary>
            The language of the current request
            </summary>
        </member>
        <member name="P:WebDesk.IRequestContext.Requestor">
            <summary>
            The user or api client of the current request
            </summary>
        </member>
        <member name="P:WebDesk.IRequestContext.Settings">
            <summary>
            Application settings
            </summary>
        </member>
        <member name="T:WebDesk.IWebAppContext">
            <summary>
            Represents the web application
            </summary>
        </member>
        <member name="M:WebDesk.IWebAppContext.GetService``1">
            <summary>
            Returns a service specified by a type argument. If the service is not registered an exception is thrown.
            </summary>
        </member>
        <member name="M:WebDesk.IWebAppContext.AddObjectMap(System.Type,System.Type,System.Boolean)">
            <summary>
            Adds a map between two types, from a source type to a destination type. A flag controls whether the mapping is a two-way one.
            <para>NOTE: Throws an exception if the ObjectMapper is already configured. </para>
            </summary>
        </member>
        <member name="M:WebDesk.IWebAppContext.Map``1(System.Object)">
            <summary>
            Creates and returns a destination object, based on a specified type argument, and maps a specified source object to destination object.
            </summary>
        </member>
        <member name="M:WebDesk.IWebAppContext.MapTo``2(``0,``1)">
            <summary>
            Maps a source to a destination object.
            </summary>
        </member>
        <member name="P:WebDesk.IWebAppContext.RootPath">
            <summary>
            The physical "root path", i.e. the root folder of the application
            <para> e.g. C:\MyApp</para>
            </summary>
        </member>
        <member name="P:WebDesk.IWebAppContext.WebRootPath">
            <summary>
            The physical "web root" path, i.e. the path to the "wwwroot" folder
            <para>e.g. C:\MyApp\wwwwroot</para>
            </summary>
        </member>
        <member name="P:WebDesk.IWebAppContext.ImagesPath">
            <summary>
            Returns the physical path of the images folder, i.e. C:\MyApp\wwwroot\images
            </summary>
        </member>
        <member name="P:WebDesk.IWebAppContext.Cache">
            <summary>
            Represents an application memory cache.
            </summary>
        </member>
        <member name="M:WebDesk.IWebAppContext.GetSettings">
            <summary>
            Returns the application settings
            </summary>
        </member>
        <member name="P:WebDesk.IWebAppContext.Culture">
            <summary>
            The <see cref="T:System.Globalization.CultureInfo"/> culture of the current request.
            </summary>
        </member>
        <member name="P:WebDesk.IWebAppContext.DevMode">
            <summary>
            Returns true when HostEnvironment.IsDevelopment() returns true.
            </summary>
        </member>
        <member name="T:WebDesk.Lib">
            <summary>
            Represents this library
            </summary>
            <summary>
            Represents this library
            </summary>
        </member>
        <member name="F:WebDesk.Lib.EmptyValue">
            <summary>
            Constant. For required model string properties without a value.
            </summary>
        </member>
        <member name="F:WebDesk.Lib.PolicyAuthorizationDefault">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:WebDesk.Lib.PolicyAuthenticated">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:WebDesk.Lib.SPhoneRegex">
            <summary>
            Phone number validation regex
            </summary>
        </member>
        <member name="M:WebDesk.Lib.Initialize(WebDesk.IWebAppContext)">
            <summary>
            Initializer
            </summary>
        </member>
        <member name="M:WebDesk.Lib.Error(System.String)">
            <summary>
            Throws an Exception
            </summary>
        </member>
        <member name="M:WebDesk.Lib.Error(System.String,System.Object[])">
            <summary>
            Throws an Exception
            </summary>
        </member>
        <member name="M:WebDesk.Lib.LogToFile(System.String,System.String)">
            <summary>
            Writes a specified text to a file and saves the file to the Log folder, i.e. AppData\Log.
            <para>The file is saved under a name containing a specified prefix and the current timestamp.</para>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an async method as a synchronous one
            </summary>
        </member>
        <member name="M:WebDesk.Lib.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes an async method as a synchronous one
            </summary>
        </member>
        <member name="M:WebDesk.Lib.GetSessionStringList(System.String)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/>    found under a specified key in session variables.
            </summary> 
        </member>
        <member name="M:WebDesk.Lib.AddToSuccessList(System.String)">
            <summary>
            Adds a message to SuccessList
            <para>NOTE: SuccessList and ErrorList messages are displayed to the user until lists are Pop()-ed.</para>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.AddToErrorList(System.String)">
            <summary>
            Adds a message to ErrorList
            <para>NOTE: SuccessList and ErrorList messages are displayed to the user until lists are Pop()-ed.</para>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.AddToErrorList(System.Collections.Generic.List{System.String})">
            <summary>
            Adds a list of messages to ErrorList
            <para>NOTE: SuccessList and ErrorList messages are displayed to the user until lists are Pop()-ed.</para>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.PopSuccessList">
            <summary>
            Removes and returns the SuccessList.
            <para>NOTE: SuccessList and ErrorList messages are displayed to the user until lists are Pop()-ed.</para>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.PopErrorList">
            <summary>
            Removes and returns the ErrorList.
            <para>NOTE: SuccessList and ErrorList messages are displayed to the user until lists are Pop()-ed.</para>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.GS(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a localized string based on a specified resource key, e.g. Customer, and the culture of the current request, e.g. el-GR
            </summary>
        </member>
        <member name="M:WebDesk.Lib.GSL(System.String,System.Int32,System.Boolean)">
            <summary>
            GSL = GetString with maxLen.
            Returns the Value value as string. 
            <para>The string is returned truncated if exceeds MaxLen. </para>
            <para>If the Value is null or empty, Value is returned.</para>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.FormatMoney(System.Decimal,System.Boolean,System.String)">
            <summary>
            Formats a decimal value as a currency value. No Currency Symbol prefix or suffix.
            </summary>
        </member>
        <member name="M:WebDesk.Lib.CreateSelectList">
            <summary>
            Creates and returns a list of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem"/> items
            </summary>
        </member>
        <member name="M:WebDesk.Lib.GetService``1">
            <summary>
            Returns a service specified by a type argument. If the service is not registered an exception is thrown.
            </summary>
        </member>
        <member name="M:WebDesk.Lib.GetSettings">
            <summary>
            Returns the application settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebDesk.Lib.CreateHttpClient">
            <summary>
            Creates and returns a <see cref="T:System.Net.Http.HttpClient"/> using a <see cref="T:System.Net.Http.IHttpClientFactory"/>
            </summary>
        </member>
        <member name="M:WebDesk.Lib.GetViewDataDictionary(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)">
            <summary>
            Creates and returns a new ViewDataDictionary
            </summary>
        </member>
        <member name="P:WebDesk.Lib.App">
            <summary>
            Represents the web application
            </summary>
        </member>
        <member name="P:WebDesk.Lib.RequestContext">
            <summary>
            Returns the request context
            </summary>
        </member>
        <member name="P:WebDesk.Lib.HttpContext">
            <summary>
            Returns the <see cref="P:WebDesk.Lib.HttpContext"/>
            </summary>
        </member>
        <member name="P:WebDesk.Lib.Request">
            <summary>
            The http request
            </summary>
        </member>
        <member name="P:WebDesk.Lib.Query">
            <summary>
            The query string as a collection of key-value pairs
            </summary>
        </member>
        <member name="P:WebDesk.Lib.MoneyFormat">
            <summary>
            Format string for formatting money values
            </summary>
        </member>
        <member name="P:WebDesk.Lib.DevMode">
            <summary>
            Returns true when HostEnvironment.IsDevelopment() returns true.
            </summary>
        </member>
        <member name="T:WebDesk.Requestor">
            <summary>
            Represents the user or api client of a request
            </summary>
        </member>
        <member name="P:WebDesk.Requestor.Id">
            <summary>
            Required. Database Id
            </summary>
        </member>
        <member name="P:WebDesk.Requestor.UserId">
            <summary>
            Required. Email or User name or something
            </summary> 
        </member>
        <member name="P:WebDesk.Requestor.Name">
            <summary>
            Optional. The requestor name
            </summary> 
        </member>
        <member name="P:WebDesk.Requestor.Email">
            <summary>
            Optional. The requestor email
            </summary> 
        </member>
        <member name="P:WebDesk.Requestor.IsBlocked">
            <summary>
            True when requestor is blocked by admins
            </summary>
        </member>
        <member name="T:WebDesk.WebAppException">
            <summary>
            Exception class to be used by this application
            </summary>
        </member>
        <member name="M:WebDesk.WebAppException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Tripous.Web.IWebAppCache">
            <summary>
            Represents an application memory cache.
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.ContainsKey(System.String)">
            <summary>
            Returns true if the key exists.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Remove(System.String)">
            <summary>
            Removes an entry by a specified key.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Set``1(System.String,``0)">
            <summary>
            Sets an entry under a specified key. Creates the entry if not already exists.
            <para>If is a new entry it will be removed from the cache after <see cref="P:Tripous.Web.IWebAppCache.DefaultEvictionTimeoutMinutes"/> minutes. </para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Set``1(System.String,``0,System.Int32)">
            <summary>
            Sets an entry under a specified key. Creates the entry if not already exists.
            <para>If is a new entry it will be removed from the cache after the specified timeout minutes. </para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns true if an entry exists under a specified key. Returns the value too as out parameter.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.TryGetValue``1(System.String,``0@)">
            <summary>
            Returns true if an entry exists under a specified key. Returns the value too as out parameter.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Get``1(System.String)">
            <summary>
            Returns a value found under a specified key, if any, else returns the default value of the specified type argument.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Get(System.String)">
            <summary>
            Returns a value found under a specified key, if any, else returns null.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Pop``1(System.String)">
            <summary>
            Removes and returns a value found under a specified key, if any, else returns the default value of the specified type argument.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Pop(System.String)">
            <summary>
            Removes and returns a value found under a specified key, if any, else returns null.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Get(System.String,System.Func{System.Object})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>object LoaderFunc()</c></para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Get(System.String,System.Func{System.ValueTuple{System.Int32,System.Object}})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>(int, object) LoaderFunc().</c></para>
            <para>The loader function must return a tuple where the first value is the eviction timeout and the second is the result object.</para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Get``1(System.String,System.Func{``0})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>T LoaderFunc&lt;T&gt;()</c></para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.IWebAppCache.Get``1(System.String,System.Func{System.ValueTuple{System.Int32,``0}})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>(int, T) LoaderFunc&lt;T&gt;().</c></para>
            <para>The loader function must return a tuple where the first value is the eviction timeout and the second is the result object.</para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="P:Tripous.Web.IWebAppCache.DefaultEvictionTimeoutMinutes">
            <summary>
            The default eviction timeout of an entry from the cache, in minutes. Defaults to 0 which means "use the timeouts of the internal implementation".
            </summary>
        </member>
        <member name="T:Tripous.Web.Session">
            <summary>
            Provides access to session variables (entries)
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Get``1(Microsoft.AspNetCore.Http.ISession,System.String)">
            <summary>
            Returns a value stored in session, found under a specified key or a default value if not found.
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Get``1(Microsoft.AspNetCore.Http.ISession,System.String,``0)">
            <summary>
            Returns a value stored in session, found under a specified key or a default value if not found.
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Set``1(Microsoft.AspNetCore.Http.ISession,System.String,``0)">
            <summary>
            Stores a value in session under a specified key.
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Get``1(System.String)">
            <summary>
            Returns a value stored in session, found under a specified key or a default value if not found.
            <para>NOTE: Key is NOT case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Get``1(System.String,``0)">
            <summary>
            Returns a value stored in session, found under a specified key or a default value if not found.
            <para>NOTE: Key is NOT case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Set``1(System.String,``0)">
            <summary>
            Stores a value in session under a specified key.
            <para>NOTE: Key is NOT case sensitive.</para>
            <para>WARNING: Whenever an object is added by calling Set(), the object is serialized.
            So adding the object first and then altering the object will NOT work.
            The object should be added after any alteration to it is done.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Pop``1(System.String)">
            <summary>
            Removes and returns a value found under a specified key, if any, else returns the default value of the specified type argument.
            <para>NOTE: Key is NOT case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.GetString(System.String)">
            <summary>
            Returns a string stored in session, found under a specified key or null if not found.
            <para>NOTE: Key is NOT case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.SetString(System.String,System.String)">
            <summary>
            Stores a string value in session under a specified key.
            <para>NOTE: Key is NOT case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Clear">
            <summary>
            Clears all session variables
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.Remove(System.String)">
            <summary>
            Removes a session variable under a specified key.
            <para>NOTE: Key is NOT case sensitive.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.Session.ContainsKey(System.String)">
            <summary>
            Returns true if a variable exists in session under a specified key.
            <para>NOTE: Key is NOT case sensitive.</para>
            </summary>
        </member>
        <member name="P:Tripous.Web.Session.Request">
            <summary>
            Provides acces to request variables.
            <para>This dictionary is used to store data while processing a single request. The dictionary's contents are discarded after a request is processed.</para>
            </summary>
        </member>
        <member name="P:Tripous.Web.Session.Language">
            <summary>
            Gets or sets the current language of the session.
            <para>Represents a language this application supports, i.e. provides localized resources for.</para>
            </summary>
        </member>
        <member name="T:Tripous.Web.WSys">
            <summary>
            Helper
            </summary>
        </member>
        <member name="F:Tripous.Web.WSys.MobileCheck">
            <summary>
            FROM: https://stackoverflow.com/questions/13086856/mobile-device-detection-in-asp-net
            </summary>
        </member>
        <member name="F:Tripous.Web.WSys.MobileVersionCheck">
            <summary>
            FROM: https://stackoverflow.com/questions/13086856/mobile-device-detection-in-asp-net
            </summary>
        </member>
        <member name="F:Tripous.Web.WSys.CrawlerCheck">
            <summary>
            FROM: https://stackoverflow.com/questions/7576508/how-to-detect-crawlers-in-asp-net-mvc
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetService``1">
            <summary>
            Returns a service specified by a type argument. If the service is not registered an exception is thrown.
            <para>WARNING: "Scoped" services can NOT be resolved from the "root" service provider. </para>
            <para>There are two solutions to the "Scoped" services problem:</para>
            <para> ● Use <c>HttpContext.RequestServices</c>, a valid solution since we use a "Scoped" service provider to create the service,  </para>
            <para> ● or add <c> .UseDefaultServiceProvider(options => options.ValidateScopes = false)</c> in the <c>CreateHostBuilder</c>() of the Program class</para>
            <para>see: https://github.com/dotnet/runtime/issues/23354 and https://devblogs.microsoft.com/dotnet/announcing-ef-core-2-0-preview-1/ </para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.ReplaceService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces one service with another
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetActionContext">
            <summary>
            Returns the current <see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/>.
            <para>WARNING: It should be called only when a valid <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> exists. </para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetUrlHelper">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper"/>.
            <para>WARNING: It should be called only when a valid <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> exists. </para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.AddSqlStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            <para>After calling this method the <see cref="P:Tripous.Data.Db.Connections"/> is loaded from the appsettings.json file with Sql database connection information. </para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetGoogleMapQueryUrl(System.String,System.Boolean,System.Int32)">
            <summary>
            Returns a Google Maps Url for a specified Query, for either a normal Map view or Sattelite view and a specified Zoom (1 to 20)
            <para>Query could be a full address or just a City or a Company name and City or any other combination.</para>
            <para>EXAMPLE: 1600 Pennsylvania Avenue; NW Washington, D.C. 20500 </para>
            <para>EXAMPLE: White House, Washington</para>
            <para>EXAMPLE: Baufox, Ηπείρου, Καλοχώρι, Θεσσαλονίκη, TK 57009 </para>
            <para>EXAMPLE: Baufox, Αθήνα</para>
            <para>Query could also have the format loc:LATITUDE+LONGTITUDE </para>
            <para>EXAMPLE: loc:40.62641513792309+22.948322824856376 </para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetQueryValue(System.String,System.String)">
            <summary>
            Returns a value from query string, if any, else returns a default value.
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetQueryValue(System.String,System.Int32)">
            <summary>
            Returns a value from query string, if any, else returns a default value.
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetQueryValue(System.String,System.Boolean)">
            <summary>
            Returns a value from query string, if any, else returns a default value.
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetQueryValueArray(System.String)">
            <summary>
            Returns the value of a query string parameter.
            <para>NOTE: When a parameter is included more than once, e.g. ?page=1&amp;page=2 then the result will be 1,2 hence this function returns an array.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.Localize(System.String)">
            <summary>
            Returns a localized string based on a specified resource key, e.g. Customer, and the culture code of the current request, e.g. el-GR
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.CreateHttpClient">
            <summary>
            Creates and returns a <see cref="T:System.Net.Http.HttpClient"/> using a <see cref="T:System.Net.Http.IHttpClientFactory"/>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetFileContentResult(System.String,System.Byte[])">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Mvc.FileContentResult"/> for downloading a file or null.
            <para>Null is returned when no data is passed (null or length = 0) and the file does not exist.</para>
            <para>NOTE: If no binary Data is specified then the function tries to load the binary data from the specified file path. </para>
            <para>CAUTION: FilePath is mandatory.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetFileContentResult(System.String,System.IO.Stream)">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Mvc.FileContentResult"/> for downloading a file or null.
            <para>Null is returned when no data is passed (null or length = 0) and the file does not exist.</para>
            <para>NOTE: If no binary Data is specified then the function tries to load the binary data from the specified file path. </para>
            <para>CAUTION: FilePath is mandatory.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetReferrerUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the referrer Url if any, else null.
            <para>NOTE: The HTTP referer is an optional HTTP header field that identifies the address of the webpage which is linked to the resource being requested. 
            By checking the referrer, the new webpage can see where the request originated</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetClientIpAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the client IP address, that is the IP address of the visitor, if any, else null
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetHostDomainName(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the domain name of the server and the TCP port number on which the server is listening. 
            The port number may be omitted if the port is the standard port for the service requested. 
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetRequestProtocol(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the scheme of the current request, i.e. https or http
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetRelativeRawUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the raw relative Url path and query string of a specified request
            <note>SEE: https://stackoverflow.com/questions/28120222/get-raw-url-from-microsoft-aspnet-http-httprequest </note>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetRelativeRawUrlEncoded(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the relative Url of a request, along with the Query String, url-encoded.
            <note>SEE: https://stackoverflow.com/questions/28120222/get-raw-url-from-microsoft-aspnet-http-httprequest </note>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetAbsoluteUrlEncoded(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the absolute Url of a request, along with the Query String, url-encoded.
            <para>Suitable for use in HTTP headers and other HTTP operations.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetAbsoluteDisplayUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the combined components of the request URL in a fully un-escaped form (except for the QueryString) suitable only for display. 
            <para>This format should not be used in HTTP headers or other HTTP operations.</para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.GetAbsoluteRouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)">
            <summary>
            Returns the absolute Url (e.g. containing scheme and host name) of a specified Route name
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.UrlEscape(System.String)">
            <summary>
            Escapes a url using the <see cref="M:System.Uri.EscapeUriString(System.String)"/>.
            <para>The <see cref="M:System.Uri.EscapeUriString(System.String)"/> escapes unreserved characters only..</para>
            <para>The <see cref="M:System.Uri.EscapeDataString(System.String)"/> escapes unreserved AND reserved charactes.</para>
            <para>Reserved Characters: :/?#[]@!$&amp;'()*+,;=  </para>
            <para>Unreserved Characters: alphanumeric and -._~ </para>
            <para>SEE: https://tools.ietf.org/html/rfc3986#section-2 </para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.UrlEscapeAll(System.String)">
            <summary>
            Escapes a url using the <see cref="M:System.Uri.EscapeDataString(System.String)"/>.
            <para>The <see cref="M:System.Uri.EscapeUriString(System.String)"/> escapes unreserved characters only..</para>
            <para>The <see cref="M:System.Uri.EscapeDataString(System.String)"/> escapes unreserved AND reserved charactes.</para>
            <para>Reserved Characters: :/?#[]@!$&amp;'()*+,;= </para>
            <para>Unreserved Characters: alphanumeric and -._~ </para>
            <para>SEE: https://tools.ietf.org/html/rfc3986#section-2 </para>
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.IsHttps(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns true if the RequestScheme is https.
            </summary>
        </member>
        <member name="M:Tripous.Web.WSys.IsLocalRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets whether the specified HTTP request URI references the local host.
            </summary>
            <param name="R">HTTP request</param>
            <returns>True, if HTTP request URI references to the local host</returns>
        </member>
        <member name="M:Tripous.Web.WSys.IsAjax(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns true if a specified request is an ajax request
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.BaseUrl">
            <summary>
            Returns the base url of this application.
            <para>CAUTION: There should be a valid HttpContext in order to be able to return the base url.</para>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.RootPath">
            <summary>
            The physical "root path", i.e. the root folder of the application
            <para> e.g. C:\MyApp</para>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.WebRootPath">
            <summary>
            The physical "web root" path, i.e. the path to the "wwwroot" folder
            <para>e.g. C:\MyApp\wwwwroot</para>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.BinPath">
            <summary>
            The physical path of the \bin folder
            <para>e.g. C:\MyApp\bin\Debug\netcoreapp3.0\  </para>
            <para>e.g. C:\inetpub\wwwroot\bin\</para>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.RootServiceProvider">
            <summary>
            Gets or sets the root <see cref="T:System.IServiceProvider"/>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.HttpContextAccessor">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor"/>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.HttpContext">
            <summary>
            Returns the HttpContext
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.HttpRequest">
            <summary>
            Returns the current HTTP request, if any, else null.
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.IsRequestAvailable">
            <summary>
            Returns true if an HTTP Request is currently available
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.IsRequestBeingRedirected">
            <summary>
            Indicates whether the client is being redirected to a new location.
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.Query">
            <summary>
            The query string as a collection of key-value pairs
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.HostEnvironment">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.Configuration">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.IsDevelopment">
            <summary>
            True when is development environment.
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.IsMobile">
            <summary>
            Returns true if we are dealing with a mobile device/browser
            <para>FROM: https://stackoverflow.com/questions/13086856/mobile-device-detection-in-asp-net </para>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.IsCrawler">
            <summary>
            Returns true if we are dealing with a search endine bot.
            <para>FROM: https://stackoverflow.com/questions/7576508/how-to-detect-crawlers-in-asp-net-mvc  </para>
            </summary>
        </member>
        <member name="P:Tripous.Web.WSys.LocalizeFunc">
            <summary>
            Delegate used by the Localize() method
            </summary>
        </member>
    </members>
</doc>
