@* This is the default DataView. To be used with trivial brokers *@
@model DataViewModel

@{
    // The standard DataView contains 3 panels in a tp.PanelList with the following indexes:
    // 0 - Browser
    // 1 - Edit (which is a TabPager)
    // 2 - Filter
    string ControlWidthCssClasses = ViewDef.GetCssClassesForControlWidths(Model.ViewDef.TextTop, Model.ViewDef.TextSplitPercent);
}

@if (!string.IsNullOrWhiteSpace(Model.ViewDef.BrokerName))
{
    <div class="desk-view tp-DataView @Html.Raw(ControlWidthCssClasses)" data-setup='@Html.Raw(Model.Setup.Serialize())'>
        
        @await Html.PartialAsync("DataView.ToolBar", Model.ViewDef.ToolBarFlags)
 
        <div class="PanelList" data-setup="{ SelectedIndex: 0 }">

            <div data-setup="{ PanelMode: 'List' }">
                <div class="Grid" data-setup="{ Width:'100%', Height: '100%', ReadOnly: true }"></div>
            </div>    

            <div data-setup="{ PanelMode: 'Edit' }">
                @{ // this creates the Edit panel, the container of the edit part of the view.
                    DataViewPagerModel PagerModel = new DataViewPagerModel(Model.ViewDef);
                    PagerModel.CssClasses = "TabControl";
                    PagerModel.DataSetupText = "{ SelectedIndex: 0 }";

                    @await Html.PartialAsync("DataView.Tabs", PagerModel)
                }
            </div>            

            <div data-setup="{ PanelMode: 'Filters' }">
            </div>
        </div>


    </div>
}


