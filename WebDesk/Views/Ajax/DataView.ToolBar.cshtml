@model ViewToolBarFlags

<div class="ToolBar">

    @if (Bf.In(ViewToolBarFlags.Home, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Home', Text: 'Home', ToolTip: 'Home' , IcoClasses: 'fa fa-home',  NoText: true, Ico: 'Left'}"></a>
    }

    @if (Bf.In(ViewToolBarFlags.List, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'List', Text: 'List', ToolTip: 'List' , IcoClasses: 'fa fa-list-alt',  NoText: true, Ico: 'Left'}"></a>
    }

    @if (Bf.In(ViewToolBarFlags.Filters, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Filters', Text: 'Filters', ToolTip: 'Filters' , IcoClasses: 'fa fa-search',  NoText: true, Ico: 'Left'}"></a>
    }

    @if (Bf.In(ViewToolBarFlags.Navigation, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'First', Text: 'First', ToolTip: 'First' , IcoClasses: 'fa fa-step-backward',  NoText: true, Ico: 'Left'}"></a>
        <a class="ButtonEx" data-setup="{ Command: 'Prior', Text: 'Prior', ToolTip: 'Prior' , IcoClasses: 'fa fa-caret-left',  NoText: true, Ico: 'Left'}"></a>
        <a class="ButtonEx" data-setup="{ Command: 'Next', Text: 'Next', ToolTip: 'Next' , IcoClasses: 'fa fa-caret-right',  NoText: true, Ico: 'Left'}"></a>
        <a class="ButtonEx" data-setup="{ Command: 'Last', Text: 'Last', ToolTip: 'Last' , IcoClasses: 'fa fa-step-forward',  NoText: true, Ico: 'Left'}"></a>
    }

    @if (Bf.In(ViewToolBarFlags.AllEdits, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Insert', Text: 'Insert', ToolTip: 'Insert' , IcoClasses: 'fa fa-plus',  NoText: true, Ico: 'Left'}"></a>
        <a class="ButtonEx" data-setup="{ Command: 'Edit', Text: 'Edit', ToolTip: 'Edit' , IcoClasses: 'fa fa-edit',  NoText: true, Ico: 'Left'}"></a>
        <a class="ButtonEx" data-setup="{ Command: 'Delete', Text: 'Delete', ToolTip: 'Delete' , IcoClasses: 'fa fa-minus',  NoText: true, Ico: 'Left'}"></a>
        <a class="ButtonEx" data-setup="{ Command: 'Save', Text: 'Save', ToolTip: 'Save' , IcoClasses: 'fa fa-floppy-o',  NoText: true, Ico: 'Left'}"></a>
    }
    else if (Bf.In(ViewToolBarFlags.Edit, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Edit', Text: 'Edit', ToolTip: 'Edit' , IcoClasses: 'fa fa-edit',  NoText: true, Ico: 'Left'}"></a>
    }
    else if (Bf.In(ViewToolBarFlags.Insert, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Insert', Text: 'Insert', ToolTip: 'Insert' , IcoClasses: 'fa fa-plus',  NoText: true, Ico: 'Left'}"></a>
    }
    else if (Bf.In(ViewToolBarFlags.Delete, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Delete', Text: 'Delete', ToolTip: 'Delete' , IcoClasses: 'fa fa-minus',  NoText: true, Ico: 'Left'}"></a>
    }
    else if (Bf.In(ViewToolBarFlags.Save, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Save', Text: 'Save', ToolTip: 'Save' , IcoClasses: 'fa fa-floppy-o',  NoText: true, Ico: 'Left'}"></a>
    }

    @if (Bf.In(ViewToolBarFlags.Cancel, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Cancel', Text: 'Cancel', ToolTip: 'Cancel' , IcoClasses: 'fa fa-times',  NoText: true, Ico: 'Left'}"></a>
    }

    @if (Bf.In(ViewToolBarFlags.Close, Model))
    {
        <a class="ButtonEx" data-setup="{ Command: 'Close', Text: 'Close', ToolTip: 'Close' , IcoClasses: 'fa fa-sign-out',  NoText: true, Ico: 'Left'}"></a>
    }

</div>

 
