@{
    ViewBag.Title = "List Binding";
}

<partial name="~/Demos/Shared/_Index.cshtml" />
<h2>@ViewBag.Title</h2>

<div>
    <p>This page displays data-binding to "list" controls.</p>
    <blockquote style="background-color: lightyellow; padding: 2px 8px">
        <p>The page uses the <code>tp.CreateContainerControls(ParentElementSelector = null, ExcludedTypes = null)</code> to create the various controls in the page.</p>
        <p>If the first parameter is not passed in the function then the document.body is used as the container.</p>
        <p>The <code>tp.CreateContainerControls(...)</code> creates controls "at once" based on the value of <code>data-setup</code> attribute of an element.</p>
        <p>
            A typical <code>data-setup</code> has a value like the following: <br />
            <pre>     &lt;div class="tp-CtrlRow" data-setup="{Text: 'Name', Control: { TypeName: 'TextBox', Id: 'Name', DataField: 'Name' } }"&gt;&lt;/div&gt; </pre>
        </p>
        <p>
            The value of a <code>data-setup</code> ends up in creating an options object known as <strong>CreateParams</strong>.
            A <strong>CreateParams</strong> object may passed to a <code>tp.tpElement</code> constructor, (or any of its descendant control classes) which is what the <code>tp.CreateContainerControls()</code> does.
            <pre>     constructor(ElementOrSelector, CreateParams)</pre>
        </p>
        <p>The CreateParams contains instructions on what control to create and the values of some of its properties, such as the <code>DataField</code> property.</p>
        <p>The css class of the container DIV, (there are only two options: <code>tp-CtrlRow</code> or <code>tp-CheckBoxRow</code>) creates a responsive container around the actual control, along with its label.</p>
    </blockquote>

    <p>The following example creates a <code>tp.DataTable</code> with just a few <code>tp.DataRow</code>s and binds that table to controls.</p>
</div>
 
<br />

<div class="html-code">
    <div>
        <button id="First" onclick="Move(1)">First</button>
        <button id="Prior" onclick="Move(2)">Prior</button>
        <button id="Next" onclick="Move(3)">Next</button>
        <button id="Last" onclick="Move(4)">Last</button>
    </div>
    <br />

    <div id="log"></div>
    <br />

    <div class="tp-Row">
        <div class="tp-Col l-33 m-50 tp-Ctrls lc-75 mc-70 sc-70">
            <div class="tp-CtrlRow" data-setup="{Text: 'Id', Control: { TypeName: 'TextBox', Id: 'Id', DataField: 'Id', ReadOnly: true } }"></div>
            <div class="tp-CtrlRow" data-setup="{Text: 'Name', Control: { TypeName: 'TextBox', Id: 'Name', DataField: 'Name' } }"></div>
            <div class="tp-CtrlRow" data-setup="{Text: 'Country', Control: { TypeName: 'ComboBox', Id: 'CountryId', ListOnly: true, ListValueField: 'Id', ListDisplayField: 'Name', DataField: 'CountryId' } }"></div>
        </div>
    </div>
</div>



<script class="js-code">
    var Table,
        tblCountry,
        DS,
        edtId,
        edtName,
        cboCountry;

    function CreateTable() {
        var Table = new tp.DataTable();

        Table.AddColumn('Id', tp.DataType.Integer);
        Table.AddColumn('Name', tp.DataType.String, 20);
        Table.AddColumn('CountryId', tp.DataType.Integer);

        var Flag;
        for (var i = 0, ln = 10; i < ln; i++) {
            Flag = (i + 1) % 2 == 0;
            Table.AddRow(i, 'Name ' + i, tp.Random(1, tblCountry.RowCount));
        }

        return Table;
    }

    function Move(v) {
        switch (v) {
            case 1: DS.First(); break;
            case 2: DS.Prior(); break;
            case 3: DS.Next(); break;
            case 4: DS.Last(); break;
        }
    }

    function DataSource_OnPositionChanged() {
        tp.Enabled('#First', DS.IsFirst === false);
        tp.Enabled('#Prior', DS.IsFirst === false);
        tp.Enabled('#Next', DS.IsLast === false);
        tp.Enabled('#Last', DS.IsLast === false);
    }

    tp.Ready(function () {
        tp.CreateContainerControls();

        tblCountry = tp.TestData.tblCountries;

        Table = CreateTable();
        DS = new tp.DataSource(Table);

        edtId = tp.FindControlById('Id');
        edtName = tp.FindControlById('Name');
        cboCountry = tp.FindControlById('CountryId');

        cboCountry.ListSource = new tp.DataSource(tblCountry);

        edtId.DataSource = DS;
        edtName.DataSource = DS;
        cboCountry.DataSource = DS;

        DS.On('PositionChanged', DataSource_OnPositionChanged);

        DataSource_OnPositionChanged();
    });
 
</script>

