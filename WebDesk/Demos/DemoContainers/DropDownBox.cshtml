 

@{
    ViewBag.Title = "DropDownBox";
}

    <partial name="~/Demos/Shared/_Index.cshtml" />
<h2>@ViewBag.Title</h2>

<div>
    <!--  -->
    <p>The DropDownBox gets always a fixed position </p>
    <p>
        The DropDownBox is a resizable dropdown box that can serve any block, inline-block or flex element, the Associate.
        It is controlled by an owner (Owner) object. <br />
        The dropdown box it always gets 'fixed' position. <br />
        It also recalculates its location in order to be inside the boundaries of the viewport.  <br />
        It recalculates its location even when its Associate changes location.  <br />
    </p>
    <div>
        <p>
            The initialization can be done by passing an object to the CreateParams parameter of the constructor as
<pre>
    var Owner = {
        OnDropDownBoxEvent: function (Sender, Stage) {
            log(tp.EnumNameOf(tp.DropDownBoxStage, Stage));
        },
    };

    var box1 = new tp.DropDownBox('#DropDownBox1', {
        Associate: '#btn1',
        Owner: Owner,
        Width: tp.Select('#btn1').getBoundingClientRect().width,
        Height: 200,
    });
</pre>
        </p>
    </div>


    <div>
        <button id="btn1" style="width: 200px" onclick="Button1Click(1)">Button1</button> <br />
        <div id="DropDownBox1"></div>
        <div style="height: 200px; background-color:lightpink;"></div>
    </div>

    <br />

 

    
</div>

<br />

 

<script>
    var Owner = {
        OnDropDownBoxEvent: function (Sender, Stage) {
            log(tp.EnumNameOf(tp.DropDownBoxStage, Stage));
        },
    };

    var box1, box2;
    tp.Ready(function () {
        var w = tp.BoundingRect(tp.Select('#btn1')).Width;

        box1 = new tp.DropDownBox('#DropDownBox1', {
            Associate: '#btn1',
            Owner: Owner,
            Width: w,
            Height: 200,
        });

 
    });

    function Button1Click(n) { 
        var box = n === 1 ? box1 : box2;
        box.Toggle();
    }

    

</script>
 