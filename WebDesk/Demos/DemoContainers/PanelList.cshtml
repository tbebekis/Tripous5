@{
    ViewBag.Title = "PanelList";
}

<partial name="~/Demos/Shared/_Index.cshtml" />
<h2>@ViewBag.Title</h2>

<div>
    <p>
        The <code>tp.PanelList</code> is a list of panels. 
        Only one panel is visible at the same time. <br />
    </p>
    <p>
        The object passed to <code>Associate</code> property (in this example a custom <code>PanelListAssociate</code> class written in this file), 
        must provide a <code>SelectedIndexChanged</code> event and a <code>SelectedIndex</code> property. 
        Such an object can automatically control the selected panel of the <code>tp.PanelList</code> panel list. <br />
    </p>
    <p>
        The <code>Associate</code> object can be passed in the <code>CreateParams</code> parameter of the <code>tp.PanelList</code> constructor,
        or in the declarative (markup) create params of the data-setup attribute. <br />
    </p>
</div>

<br />

<div>
    <button id="btn1" onclick="AddPanel()">Add Panel</button> <br />
</div>

<br />

<style>
    #Container {
        position: relative;
        display: flex;
        flex-direction: row;
        border: 1px solid gray;
        height: 260px;
        width: 100%;
    }

    #pnl1 {
        position: relative;
        background-color: lightcoral;
        width: 180px;
    }

    #pnl2 {
        position: relative;
        background-color: lightblue;
        flex-grow: 1;
    }

    #ListBox {
        position: relative;
        width: 100%;
        height: 100%;
        background-color: lightgoldenrodyellow;
    }
</style>
 

<div class="html-code">
    <div id="Container">
        <div id="pnl1">
            <select id="ListBox" size="10">
            </select>
        </div>
        <div class="tp-Splitter"></div> 
        <div id="pnl2" data-setup="{ Associate: '#ListBox', SelectedIndex: 0 }">
            <div>Panel 1</div>
            <div>Panel 2</div>
            <div>Panel 3</div>
        </div>
    </div>
</div>


<script class="js-code">
    // a totally custom Associate object, build upon a select element.
    // A tp.ListBox can be used instead, or any other tp class providing a SelectedIndexChanged event.
    let PanelListAssociate = class extends tp.Component {
        constructor(ElementOrSelector, CreateParams) {
            super(ElementOrSelector, CreateParams);
        }

        get SelectedIndex() {
            return this.fSelectedIndex;
        }

        set SelectedIndex(v) {
            if (tp.IsNumber(v) && v !== this.SelectedIndex) {
                this.fSelectedIndex = v;
                this.Trigger("SelectedIndexChanged");
            }
        }

        AddListItem(Text) {
            var option = this.Document.createElement("option");
            option.text = Text;
            this.Handle.add(option); 
        } 
 
        OnHandleCreated() {
            super.OnHandleCreated();
            this.HookEvent(tp.Events.Change);
        }

       OnAnyDOMEvent(e) {
            var Type = tp.Events.ToTripous(e.type);

           if (tp.Events.Change === Type) {
               this.SelectedIndex = parseInt(this.Handle.selectedIndex, 10);
            }

            super.OnAnyDOMEvent(e);
        }
 
    }
    PanelListAssociate.prototype.fSelectedIndex = -1;


    var lbo = null; 
    let ctrl = null;

    // a function for adding a child
    function AddPanel() {
        var child = ctrl.AddPanel();
        child.style.backgroundColor = tp.RandomColor();
        var S = 'Panel ' + ctrl.Count;
        child.innerHTML = S;

        lbo.AddListItem(S);
    }

    // create the panel list control
    tp.Ready(function () {
        let Splitter = new tp.Splitter('.tp-Splitter');
        
        lbo = new PanelListAssociate(ListBox);

        ctrl = new tp.PanelList(pnl2);

        let List = ctrl.GetPanelList();

        for (let i = 0, ln = List.length; i < ln; i++) {
            lbo.AddListItem('Panel ' + (i + 1));
            List[i].style.backgroundColor = tp.RandomColor();
        }         
    });
 
</script>

 
 