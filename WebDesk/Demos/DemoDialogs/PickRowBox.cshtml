@{
    ViewBag.Title = "PickRowBox";
}

<partial name="~/Demos/Shared/_Index.cshtml" />
<h2>@ViewBag.Title</h2>

<div>
    <p>
        The <code>tp.PickRowBoxAsync()</code> function displays a row pick list dialog box with a grid that allows the user to check/select a single row. Returns a Promise.  <br />
        There are variations of this <code>tp.PickRowBoxAsync()</code> function that accept a <code>tp.DataTable</code>, a <code>tp.SelectSql</code> object, or a SELECT statement text. <br />
    </p>
    <ul>
        <li><code>tp.PickRowBoxAsync1(Args)</code></li>
        <li><code>tp.PickRowBoxAsync2(Table, VisibleColumns, KeyValue, KeyFieldName, SqlText, Text)</code></li>
        <li><code>tp.PickRowBoxAsync3(SelectSql, Text)</code></li>
        <li><code>tp.PickRowBoxAsync4(SqlText, VisibleColumns, Text)</code></li>
    </ul>
    <p>The <code>tp.WindowArgs</code> returned by this function, when the user clicks OK, contains the SelectedRow property with the selected <code>tp.DataRow</code> row.</p>
</div>

<br />

<div class="html-code">
    <button onclick="ShowDialog()">Show PickRowBox dialog</button> <br />
</div>
<br />



<script class="js-code">
    async function ShowDialog() {
        var SqlText = 'select * from Trader';
        var VisibleColumns = ['Code', 'Name'];
        var Text = 'Select an item';

        let Args = await tp.PickRowBoxAsync4(SqlText, VisibleColumns, Text)

        let DialogResult = Args.Window.DialogResult;
        let S = tp.EnumNameOf(tp.DialogResult, DialogResult);
        if (!tp.IsEmpty(Args.SelectedRow)) {
            S += ' \nSelected Row: ' + Args.SelectedRow.Get('Name');
        }

        tp.InfoNote('DialogResult = ' + S);
    }

</script>
