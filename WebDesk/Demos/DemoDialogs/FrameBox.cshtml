@{
    ViewBag.Title = "FrameBox";
}

<partial name="~/Demos/Shared/_Index.cshtml" />
<h2>@ViewBag.Title</h2>

<div>
    <p>The functions  <br /></p>
    <ul class="no-style">
        <li><code>tp.FrameBox(Text, UrlOrHtmlContent, CloseFunc = null, Creator = null)</code> and</li>
        <li><code>tp.FrameBoxAsync(Text, UrlOrHtmlContent)</code></li>
    </ul>
    <p>both display a modal window with an iframe element. The second function returns a promise.</p>
</div>

<br />

<div class="html-code">

    <div>
        <button onclick="FrameUrlDialog()">Display Url in a frame dialog</button> <input id="Url" type="text" value="https://www.w3.org/DOM/" style="width: 200px;" />
    </div>

    <br />

    <div>
        <button onclick="FrameContentDialog()">Display content in a frame dialog</button>
    </div>

    <br />

    <div id="Content" style="display: none">
        <p>
            The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement
            interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.
        </p>
        <button>Hi there</button>
        <input type="text" value="text" />
    </div>

</div>



<script class="js-code">
    async function FrameUrlDialog() {
        var el = tp.Select('#Url');
        var Url = el.value;
        await tp.FrameBoxAsync('Display Url in a iframe', Url);
        tp.InfoNote('Your dialog is closed.');
    }

    function FrameContentDialog() {
        var el = tp.Select('#Content');
        var Content = el.innerHTML;
        tp.FrameBoxAsync('Display content in a iframe', Content)
            .then(function () { tp.InfoNote('Your dialog is closed.'); });
    }

</script>

