<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebDesk</name>
    </assembly>
    <members>
        <member name="T:WebDesk.ActionExceptionFilter">
            <summary>
            Global exception filter for controller actions. Use this instead of try-catch blocks inside action methods.    
            <para>
            Exception filters: <br />
             ● Handle unhandled exceptions that occur in Razor Page or controller creation, model binding, action filters, or action methods. <br />
             ● Do not catch exceptions that occur in resource filters, result filters, or MVC result execution.  
            </para>
            <para></para>
            <para>
            SEE: https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-3.1#exception-filters
            </para>
            <para>To register</para>
            <para><code> services.AddControllersWithViews(o =&gt; { o.Filters.Add&lt;ActionExceptionFilter&gt;(); })
            </code></para>
            </summary>
        </member>
        <member name="M:WebDesk.ActionExceptionFilter.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.ActionExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Called after an action has thrown a <see cref="T:System.Exception"/> 
            </summary>
        </member>
        <member name="F:WebDesk.ActionExceptionFilter.HandlerFunc">
            <summary>
            A replacable static handler function for global exceptions. It offers a default error handling.
            </summary>
        </member>
        <member name="T:WebDesk.ActionExceptionFilterContext">
            <summary>
            Context for the <see cref="T:WebDesk.ActionExceptionFilter"/>
            </summary>
        </member>
        <member name="M:WebDesk.ActionExceptionFilterContext.#ctor(System.Boolean,System.String,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Reflection.TypeInfo,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:WebDesk.ActionExceptionFilterContext.IsWebApi">
            <summary>
            True means the exception thrown in an action of a Web Api controller, else in an Mvc controller.
            </summary>
        </member>
        <member name="P:WebDesk.ActionExceptionFilterContext.ExceptionContext">
            <summary>
            The exception context
            </summary>
        </member>
        <member name="P:WebDesk.ActionExceptionFilterContext.ActionDescriptor">
            <summary>
            The action descriptor
            </summary>
        </member>
        <member name="P:WebDesk.ActionExceptionFilterContext.ControllerTypeInfo">
            <summary>
            The controller type info. <see cref="T:System.Reflection.TypeInfo"/> is a descendant of the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="P:WebDesk.ActionExceptionFilterContext.ModelMetadataProvider">
            <summary>
            The model metadata provider
            </summary>
        </member>
        <member name="P:WebDesk.ActionExceptionFilterContext.RequestId">
            <summary>
            The Id of the current http request
            </summary>
        </member>
        <member name="P:WebDesk.ActionExceptionFilterContext.IsDevelopment">
            <summary>
            True when in development environment
            </summary>
        </member>
        <member name="T:WebDesk.AppSettings">
            <summary>
            Application settings, coming from appsettings.json
            </summary>
        </member>
        <member name="P:WebDesk.AppSettings.PluginsFolder">
            <summary>
            Plugins folder path
            </summary>
        </member>
        <member name="P:WebDesk.AppSettings.Jwt">
            <summary>
            Security settings
            </summary>
        </member>
        <member name="P:WebDesk.AppSettings.HSTS">
            <summary>
            HSTS settings
            <para>SEE: https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security </para>
            </summary>
        </member>
        <member name="T:WebDesk.AuthCookieEvents">
            <summary>
            SEE: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-3.1#react-to-back-end-changes
            SEE: http://codereform.com/blog/post/asp-net-core-2-0-authentication-with-local-logins-responding-to-backend-changes/
            </summary>
        </member>
        <member name="T:WebDesk.CookieAuthHelper">
            <summary>
            Cookie authentication helper
            </summary>
        </member>
        <member name="M:WebDesk.CookieAuthHelper.GetUserCookieOptions">
            <summary>
            Returns the default cookie options for the user cookie.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebDesk.CookieAuthHelper.SetCookieConfigurationOptions(Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)">
            <summary>
            Sets the <see cref="T:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions"/>. To be called from Startup.
            </summary>
        </member>
        <member name="T:WebDesk.HSTSSettings">
            <summary>
            HSTS settings.
            <para>
            HTTP Strict Transport Security (HSTS) is a web security policy mechanism 
            that helps to protect websites against protocol downgrade attacks[1] and cookie hijacking. 
            </para>
            It allows web servers to declare that web browsers (or other complying user agents) should interact with it 
            using only secure HTTPS connections,[2] and never via the insecure HTTP protocol. 
            <para>
            A server implements an HSTS policy by supplying a header over an HTTPS connection (HSTS headers over HTTP are ignored).
            For example, a server could send a header such that future requests to the domain for the next year 
            (max-age is specified in seconds; 31,536,000 is equal to one non-leap year) use only HTTPS: Strict-Transport-Security: max-age=31536000
            </para>
            <para>The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</para>
            <para></para>
            <para>SEE: https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security </para>
            <para>SEE: https://aka.ms/aspnetcore-hsts </para>
            <para>SEE: https://hstspreload.org/ </para>
            </summary>
        </member>
        <member name="P:WebDesk.HSTSSettings.MaxAgeHours">
            <summary>
            How many ours to apply the policy
            </summary>
        </member>
        <member name="P:WebDesk.HSTSSettings.Preload">
            <summary>
            Preload. See https://hstspreload.org/
            </summary>
        </member>
        <member name="P:WebDesk.HSTSSettings.IncludeSubDomains">
            <summary>
            When true applies the HSTS policy to Host subdomains
            </summary>
        </member>
        <member name="P:WebDesk.HSTSSettings.ExcludedHosts">
            <summary>
            A list of hosts to exclude
            </summary>
        </member>
        <member name="T:WebDesk.JwtAuthHelper">
            <summary>
            Helper for JWT token authentication.
            </summary>
        </member>
        <member name="M:WebDesk.JwtAuthHelper.DecodeToken(System.IdentityModel.Tokens.Jwt.JwtSecurityToken)">
            <summary>
            Decodes a specified token.
            </summary>
        </member>
        <member name="M:WebDesk.JwtAuthHelper.MessageReceived(Microsoft.AspNetCore.Authentication.JwtBearer.MessageReceivedContext)">
            <summary>
            Event handler. The <see cref="P:Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerEvents.OnMessageReceived"/> event gives the application an opportunity to get the token from a different location, adjust, or reject the token.
            <para>The application may set the Context.Token in the OnMessageReceived. Otherwise Context.Token is null.</para>
            <para>SEE: https://stackoverflow.com/a/54497616/1779320        </para>
            </summary>
        </member>
        <member name="M:WebDesk.JwtAuthHelper.TokenValidated(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext)">
            <summary>
            Event handler. The <see cref="P:Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerEvents.OnTokenValidated" /> is called after the passed in <see cref="P:Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext.SecurityToken"/> is loaded and validated successfully.
            </summary>
        </member>
        <member name="M:WebDesk.JwtAuthHelper.ReadTokenFromRequestHeader(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            For debug purposes. 
            Reads a token by reading the <see cref="F:Microsoft.Net.Http.Headers.HeaderNames.Authorization"/> header 
            from <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Headers"/>, 
            and converting the token string to a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>
            </summary>
        </member>
        <member name="M:WebDesk.JwtAuthHelper.SetJwtBearerConfigurationOptions(Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions,WebDesk.JwtSettings)">
            <summary>
            Configures the <see cref="T:Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions"/>. To be called from Startup.
            </summary>
        </member>
        <member name="M:WebDesk.JwtAuthHelper.GetAuthenticatedResult(WebDesk.IClaimListProvider,WebDesk.JwtSettings,System.String)">
            <summary>
            Creates and returns a JWT authenticated result (along with token and claims)
            </summary>
        </member>
        <member name="T:WebDesk.JwtRequestContext">
            <summary>
            Request context for JWT clients
            </summary>
        </member>
        <member name="M:WebDesk.JwtRequestContext.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:WebDesk.JwtRequestContext.Language">
            <summary>
            The language of the current request
            </summary>
        </member>
        <member name="P:WebDesk.JwtRequestContext.IsAuthenticated">
            <summary>
            True when the user is authenticated with the cookie authentication scheme.
            </summary>
        </member>
        <member name="T:WebDesk.JwtSettings">
            <summary>
            Security settings
            </summary>
        </member>
        <member name="P:WebDesk.JwtSettings.Enabled">
            <summary>
            True to enable security
            </summary>
        </member>
        <member name="P:WebDesk.JwtSettings.Secret">
            <summary>
            A string used in signing the Jwt token.
            </summary>
        </member>
        <member name="P:WebDesk.JwtSettings.Issuer">
            <summary>
            Optional. A case-sensitive string or URI value representing the entity that generates the tokens.
            <para>SEE: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1 </para>
            </summary>
        </member>
        <member name="P:WebDesk.JwtSettings.Audience">
            <summary>
            Optional. A string array or a signle string or URI value identifying the recipients that the Jwt Token is intended for.
            <para>SEE: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3 </para>
            </summary>
        </member>
        <member name="P:WebDesk.JwtSettings.LifeTimeMinutes">
            <summary>
            The number of minutes a Jwt is valid.
            </summary>
        </member>
        <member name="T:WebDesk.DecimalModelBinder">
            <summary>
            Handles decimals.
            <para>We can NOT have an action with a double or decimal parameter, e.g. GetCartTotals(string CustomerId, decimal ShippingCharge).</para>
            <para>The default ModelBinder converts 123.45 to 12345.</para>
            <para>The reason is that the default ModelBinder sees doubles/decimals as integers if they are NOT JSON.stringified(), as when we send a model. </para>
            <para>But in cases where there is no a model, but just simple value parameteres to an action, the convertion fails.</para>
            <para>So to handle cases like that this custom binder is used.</para>
            <para>SEE: https://stackoverflow.com/questions/32908503/c-sharp-mvc-controller-cannot-get-decimal-or-double-values-from-ajax-post-reques </para>
            <para>SEE: https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding </para>
            </summary>
        </member>
        <member name="M:WebDesk.DecimalModelBinder.TryParse(System.String,System.Decimal@)">
            <summary>
            Converts a string into a decimal. Returns true on success.
            </summary>
        </member>
        <member name="M:WebDesk.DecimalModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            Attempts to bind a model.
            </summary>
        </member>
        <member name="T:WebDesk.AppModelBinderProvider">
            <summary>
            SEE: https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding
            </summary>
        </member>
        <member name="T:WebDesk.ObjectMapper">
            <summary>
            Object mapper. Wrapper for the AutoMaper.
            </summary>
        </member>
        <member name="M:WebDesk.ObjectMapper.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:WebDesk.ObjectMapper.Configure(System.Action{System.Object})">
            <summary>
            Creates the mappings based on the internal map list. 
            <para>It calls the passed in call-back passing a Configurator object, which in the current implementantion is an AutoMapper.IMapperConfigurationExpression instance.</para>
            <para>NOTE: Throws an exception if the <see cref="M:WebDesk.ObjectMapper.Configure(System.Action{System.Object})"/>() method is already called. </para>
            </summary>
        </member>
        <member name="M:WebDesk.ObjectMapper.AddMap(System.Type,System.Type,System.Boolean)">
            <summary>
            Adds a map between two types, from a source type to a destination type. A flag controls whether the mapping is a two-way one.
            <para>NOTE: Throws an exception if the <see cref="M:WebDesk.ObjectMapper.Configure(System.Action{System.Object})"/>() method is already called. </para>
            </summary>
        </member>
        <member name="M:WebDesk.ObjectMapper.Map``1(System.Object)">
            <summary>
            Creates and returns a destination object, based on a specified type argument, and maps a specified source object to destination object.
            </summary>
        </member>
        <member name="M:WebDesk.ObjectMapper.MapTo``2(``0,``1)">
            <summary>
            Maps a source to a destination object.
            </summary>
        </member>
        <member name="P:WebDesk.ObjectMapper.IsConfigured">
            <summary>
            True if the <see cref="M:WebDesk.ObjectMapper.Configure(System.Action{System.Object})"/>() method is already called.
            </summary>
        </member>
        <member name="T:WebDesk.UserCookie">
            <summary>
            Visitor cookie
            </summary>
        </member>
        <member name="M:WebDesk.UserCookie.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:WebDesk.UserCookie.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="P:WebDesk.UserCookie.RequestorId">
            <summary>
            The Requestor.Id, this is the Id of the current Requestor
            </summary>
        </member>
        <member name="P:WebDesk.UserCookie.UnAuthenticatedId">
            <summary>
            This is the Id of the last un-authenticated Visitor.
            </summary>
        </member>
        <member name="P:WebDesk.UserCookie.CultureCode">
            <summary>
            The culture code of the requestor
            </summary>
        </member>
        <member name="E:WebDesk.UserCookie.Changed">
            <summary>
            Called whenever a property of this instance changes.
            </summary>
        </member>
        <member name="T:WebDesk.UserRequestContext">
            <summary>
            Request context for browser clients (cookies)
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.GetRequestor(System.String)">
            <summary>
            Returns a user from database found under a specified Id, if any, else null.
            <para>If the user is found, then it sets the cookie too.</para>
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.ReadCookie">
            <summary>
            Reads the cookie from <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> and loads the properties of this instance.
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.WriteCookie">
            <summary>
            Writes cookie's properties to the <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> (as base64 string).
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.Cookie_Changed(System.Object,System.EventArgs)">
            <summary>
            Called whenever a property of Cookie changes.
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.GetClaimList(WebDesk.Requestor)">
            <summary>
            Creates and returns a claim list regarding a specified visitor
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.SignInAsync(WebDesk.Requestor,System.Boolean,System.Boolean)">
            <summary>
            Sign-in. Authenticates a specified, already validated, Visitor
            </summary>
        </member>
        <member name="M:WebDesk.UserRequestContext.SignOutAsync">
            <summary>
            Sign-out.
            </summary>
        </member>
        <member name="P:WebDesk.UserRequestContext.Requestor">
            <summary>
            The current Requestor (the session Requestor)
            <para>NOTE: Setting or unsetting the Requestor, sets or unsets the Requestor cookie too.</para>
            </summary>
        </member>
        <member name="P:WebDesk.UserRequestContext.Language">
            <summary>
            The selected language (and culture) of the Requestor
            </summary>
        </member>
        <member name="P:WebDesk.UserRequestContext.IsAuthenticated">
            <summary>
            True when the user is authenticated with the cookie authentication scheme.
            </summary>
        </member>
        <member name="P:WebDesk.UserRequestContext.IsImpersonation">
            <summary>
            True when the Visitor has loged-in usin the SuperUserPassword
            </summary>
        </member>
        <member name="T:WebDesk.WApp">
            <summary>
            Represents this application
            </summary>
            <summary>
            Represents this application
            </summary>
        </member>
        <member name="M:WebDesk.WApp.OnStarted">
            <summary>
            The host has fully started.
            <para>Perform post-startup activities here</para>
            </summary>
        </member>
        <member name="M:WebDesk.WApp.OnStopping">
            <summary>
            The host is performing a graceful shutdown. Requests may still be processing. Shutdown blocks until this event completes.
            <para>Perform on-stopping activities here</para>
            </summary>
        </member>
        <member name="M:WebDesk.WApp.OnStopped">
            <summary>
            The host is completing a graceful shutdown. All requests should be processed. Shutdown blocks until this event completes.
            <para>Perform post-stopped activities here</para>
            </summary>
        </member>
        <member name="M:WebDesk.WApp.GetService``1">
            <summary>
            Returns a service specified by a type argument. If the service is not registered an exception is thrown.
            <para>WARNING: "Scoped" services can NOT be resolved from the "root" service provider. </para>
            <para>There are two solutions to the "Scoped" services problem:</para>
            <para> ● Use <c>HttpContext.RequestServices</c>, a valid solution since we use a "Scoped" service provider to create the service,  </para>
            <para> ● or add <c> .UseDefaultServiceProvider(options => options.ValidateScopes = false)</c> in the <c>CreateHostBuilder</c>() of the Program class</para>
            <para>see: https://github.com/dotnet/runtime/issues/23354 and https://devblogs.microsoft.com/dotnet/announcing-ef-core-2-0-preview-1/ </para>
            </summary>
        </member>
        <member name="M:WebDesk.WApp.ImageUrl(System.String)">
            <summary>
            Returns the path url of an image, e.g. ~/themes/THEME/Content/images/IMAGE.png
            </summary>
        </member>
        <member name="P:WebDesk.WApp.DebugMode">
            <summary>
            Returns true when in debug mode, i.e. the DEBUG constant is defined.
            </summary>
        </member>
        <member name="P:WebDesk.WApp.DevMode">
            <summary>
            Returns true when HostEnvironment.IsDevelopment() returns true.
            </summary>
        </member>
        <member name="P:WebDesk.WApp.HttpContext">
            <summary>
            Returns the HttpContext
            </summary>
        </member>
        <member name="P:WebDesk.WApp.HostEnvironment">
            <summary>
            Returns the HostEnvironment
            </summary>
        </member>
        <member name="P:WebDesk.WApp.Configuration">
            <summary>
            The configuration instance for the appsettings.json
            </summary>
        </member>
        <member name="P:WebDesk.WApp.ContentRootFileProvider">
            <summary>
            Returns an <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> pointing to <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath"/>.
            </summary>
        </member>
        <member name="P:WebDesk.WApp.RootPath">
            <summary>
            The physical "root path", i.e. the root folder of the application
            <para> e.g. C:\MyApp</para>
            </summary>
        </member>
        <member name="P:WebDesk.WApp.WebRootPath">
            <summary>
            The physical "web root" path, i.e. the path to the "wwwroot" folder
            <para>e.g. C:\MyApp\wwwwroot</para>
            </summary>
        </member>
        <member name="P:WebDesk.WApp.ImagesPath">
            <summary>
            Returns the physical path of the images folder, i.e. C:\MyApp\wwwroot\images
            </summary>
        </member>
        <member name="P:WebDesk.WApp.AppSettings">
            <summary>
            Application settings, coming from appsettings.json
            </summary>
        </member>
        <member name="M:WebDesk.WApp.InitializeSysConfig">
            <summary>
            Sets-up the SysConfig
            </summary>
        </member>
        <member name="M:WebDesk.WApp.InitializeDbProviderFactories">
            <summary>
            Initializes <see cref="T:System.Data.Common.DbProviderFactory"/> classes.
            </summary>
        </member>
        <member name="M:WebDesk.WApp.LoadPlugins">
            <summary>
            Loads plugins
            </summary>
        </member>
        <member name="M:WebDesk.WApp.LoadLanguages">
            <summary>
            Loads the active languages from the database table.
            <para>It also extracts language flag images from resources and saves it to wwwroot/images, if not already there.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WApp.AddObjectMaps(System.Object)">
            <summary>
            A call-back function to be used with <see cref="M:WebDesk.ObjectMapper.Configure(System.Action{System.Object})"/> methods.
            <para>NOTE: The passed in Configurator object is an AutoMapper.IMapperConfigurationExpression instance, in the current implementantion.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WApp.InitializeApplication">
            <summary>
            Initializes the application
            </summary>
        </member>
        <member name="M:WebDesk.WApp.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure services.
            <para>Service Lifetime: </para>
            <para>Transient : each time is requested</para>
            <para>Scoped    : once per HTTP Request</para>
            <para>Singleton : once per application</para>
            </summary>
        </member>
        <member name="M:WebDesk.WApp.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Options.IOptionsMonitor{WebDesk.AppSettings})">
            <summary>
            Configure application
            <para>Called from Configure()</para>
            </summary>
        </member>
        <member name="T:WebDesk.WebAppContext">
            <summary>
            Represents the web application. It is passed to the DataStore as a link point between the two parts.
            </summary>
        </member>
        <member name="M:WebDesk.WebAppContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppContext.GetService``1">
            <summary>
            Returns a service specified by a type argument. If the service is not registered an exception is thrown.
            </summary>
        </member>
        <member name="M:WebDesk.WebAppContext.AddObjectMap(System.Type,System.Type,System.Boolean)">
            <summary>
            Adds a map between two types, from a source type to a destination type. A flag controls whether the mapping is a two-way one.
            <para>NOTE: Throws an exception if the ObjectMapper is already configured. </para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppContext.Map``1(System.Object)">
            <summary>
            Creates and returns a destination object, based on a specified type argument, and maps a specified source object to destination object.
            </summary>
        </member>
        <member name="M:WebDesk.WebAppContext.MapTo``2(``0,``1)">
            <summary>
            Maps a source to a destination object.
            </summary>
        </member>
        <member name="M:WebDesk.WebAppContext.GetSettings">
            <summary>
            Returns the application settings
            </summary>
        </member>
        <member name="P:WebDesk.WebAppContext.RootPath">
            <summary>
            The physical "root path", i.e. the root folder of the application
            <para> e.g. C:\MyApp</para>
            </summary>
        </member>
        <member name="P:WebDesk.WebAppContext.WebRootPath">
            <summary>
            The physical "web root" path, i.e. the path to the "wwwroot" folder
            <para>e.g. C:\MyApp\wwwwroot</para>
            </summary>
        </member>
        <member name="P:WebDesk.WebAppContext.ImagesPath">
            <summary>
            Returns the physical path of the images folder, i.e. C:\MyApp\wwwroot\images
            </summary>
        </member>
        <member name="P:WebDesk.WebAppContext.Cache">
            <summary>
            Represents an application memory cache.
            </summary>
        </member>
        <member name="P:WebDesk.WebAppContext.Culture">
            <summary>
            The <see cref="T:System.Globalization.CultureInfo"/> culture of the current request.
            <para>CAUTION: The culture of each HTTP Request is set by a lambda in ConfigureServices().
            This property here uses that setting to return its value.
            </para>
            </summary>
        </member>
        <member name="P:WebDesk.WebAppContext.Language">
            <summary>
            The <see cref="P:WebDesk.WebAppContext.Language"/> language of the current request.
            <para>CAUTION: The culture of each HTTP Request is set by a lambda in ConfigureServices().
            This property here uses that setting to return its value.
            </para>
            </summary>
        </member>
        <member name="P:WebDesk.WebAppContext.DevMode">
            <summary>
            Returns true when HostEnvironment.IsDevelopment() returns true.
            </summary>
        </member>
        <member name="T:WebDesk.WebAppMemoryCache">
            <summary>
            An <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> wrapper 
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.ContainsKey(System.String)">
            <summary>
            Returns true if the key exists.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Remove(System.String)">
            <summary>
            Removes an entry by a specified key.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Set``1(System.String,``0)">
            <summary>
            Sets an entry under a specified key. Creates the entry if not already exists.
            <para>If is a new entry it will be removed from the cache after <see cref="P:WebDesk.WebAppMemoryCache.DefaultEvictionTimeoutMinutes"/> minutes. </para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Set``1(System.String,``0,System.Int32)">
            <summary>
            Sets an entry under a specified key. Creates the entry if not already exists.
            <para>If is a new entry it will be removed from the cache after the specified timeout minutes. </para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns true if an entry exists under a specified key. Returns the value too as out parameter.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.TryGetValue``1(System.String,``0@)">
            <summary>
            Returns true if an entry exists under a specified key. Returns the value too as out parameter.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Get``1(System.String)">
            <summary>
            Returns a value found under a specified key, if any, else returns the default value of the specified type argument.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Get(System.String)">
            <summary>
            Returns a value found under a specified key, if any, else returns null.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Pop``1(System.String)">
            <summary>
            Removes and returns a value found under a specified key, if any, else returns the default value of the specified type argument.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Pop(System.String)">
            <summary>
            Removes and returns a value found under a specified key, if any, else returns null.
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Get(System.String,System.Func{System.Object})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>object LoaderFunc()</c></para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Get(System.String,System.Func{System.ValueTuple{System.Int32,System.Object}})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>(int, object) LoaderFunc().</c></para>
            <para>The loader function must return a tuple where the first value is the eviction timeout and the second is the result object.</para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Get``1(System.String,System.Func{``0})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>T LoaderFunc&lt;T&gt;()</c></para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="M:WebDesk.WebAppMemoryCache.Get``1(System.String,System.Func{System.ValueTuple{System.Int32,``0}})">
            <summary>
            Returns a value found under a specified key.
            <para>If the key does not exist, it calls the specified loader call-back function </para>
            <para>The loader function should be defined as <c>(int, T) LoaderFunc&lt;T&gt;().</c></para>
            <para>The loader function must return a tuple where the first value is the eviction timeout and the second is the result object.</para>
            <para>NOTE: Key is case sensitive.</para>
            </summary>
        </member>
        <member name="P:WebDesk.WebAppMemoryCache.DefaultEvictionTimeoutMinutes">
            <summary>
            The default eviction timeout of an entry from the cache, in minutes. Defaults to 0 which means "use the timeouts of the internal implementation".
            </summary>
        </member>
        <member name="T:WebDesk.Controllers.HomeController">
            <summary>
            Home
            </summary>
        </member>
        <member name="T:WebDesk.Startup">
            <summary>
            The startup class. It actually delegates all "action" to <see cref="T:WebDesk.WApp"/> class
            <para>NOTE: only those two services can be injected into Startup constructor: <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>, <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></para>
            </summary>
        </member>
        <member name="M:WebDesk.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Constructor.
            <para>NOTE: only those two services can be injected into Startup constructor: <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>, <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></para>
            <para>see: https://docs.microsoft.com/en-gb/aspnet/core/fundamentals/dependency-injection#services-injected-into-startup</para>
            </summary>
        </member>
        <member name="M:WebDesk.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
        </member>
        <member name="M:WebDesk.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Options.IOptionsMonitor{WebDesk.AppSettings})">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
        </member>
    </members>
</doc>
